/* =========================================================== *\
  BASE
\* =========================================================== */
// Set global box-sizing to border-box, this is not an option!
*, *:before, *:after {
  -moz-box-sizing: border-box; 
  -webkit-box-sizing: border-box; 
  box-sizing: border-box;
}




/* =========================================================== *\
  OPTIONS
\* =========================================================== */
$grid-max-width        : 1240px !default; // The grid width, including gutter
// Gutters
$grid-default-gutter   : 10px !default;
// Columns
$grid-column-count     : 12 !default;
// Include html classes?
$grid-html-classes          : false !default;
$grid-html-column-prefix    : 'col' !default;

// Map of sizes
$grid-sizes: 
  (
    641px,                            // Min-width
    768px,                            // Max-width
    10px,                             // Gutter
    "md"                              // Prefix
  ),
  (
    769px,                            // Min-width
    1024px,                           // Max-width
    20px,                             // Gutter
    "lg"                              // Prefix
  ) !default;





/* =========================================================== *\
  PLACEHOLDERS
\* =========================================================== */
%row {
  margin: 0 auto;
  *zoom: 1;
  max-width: $grid-max-width;
  padding-left: floor($grid-default-gutter / 2);
  padding-right: floor($grid-default-gutter / 2);

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }

  @each $size in $grid-sizes {
    $min-width: nth($size, 1);
    $gutter: nth($size, 3);
    @media screen and (min-width: #{$min-width}) {
      padding-left: floor($gutter / 2);
      padding-right: floor($gutter / 2);
    }
  }
}

%col {
  float: left;
  padding-left: floor($grid-default-gutter / 2);
  padding-right: floor($grid-default-gutter / 2);
  display: block;
  @each $size in $grid-sizes {
    $min-width: nth($size, 1);
    $gutter: nth($size, 3);
    @media screen and (min-width: #{$min-width}) {
      padding-left: floor($gutter / 2);
      padding-right: floor($gutter / 2);
    }
  }
}

%row-reset {
  margin-left: -$grid-default-gutter;
  margin-right: -$grid-default-gutter;
  @each $size in $grid-sizes {
    $min-width: nth($size, 1);
    $gutter: nth($size, 3);
    @media screen and (min-width: #{$min-width}) {
      margin-left: -$gutter;
      margin-right: -$gutter;
    }
  }
}





/* =========================================================== *\
  MIXINS
\* =========================================================== */
@mixin row() {
  @extend %row;
}

@mixin row-reset() {
  @extend %row-reset;
}

@mixin col($span: '', $prefix: '') {
  @extend %col;

  @if $span == '' {
    $span: $grid-column-count;
  }

  @if $prefix != '' {
    $options: get-options-by-prefix($prefix);
    $min-width: nth($options, 1);
    // Wrap width in mq
    @media screen and (min-width: #{$min-width}) {
      width: percentage($span / $grid-column-count);
    }
  } @else {
    width: percentage($span / $grid-column-count);
  }
}

@mixin offset($span: '', $prefix: '') {
  @if $span == '' {
    @return;
  }
  
  @if $prefix != '' {
    $options: get-options-by-prefix($prefix);
    $min-width: nth($options, 1);
    @media screen and (min-width: #{$min-width}) {
      margin-left: percentage($span / $grid-column-count);
    }
  } @else {
    margin-left: percentage($span / $grid-column-count);
  }
}

@mixin hide-for($prefix: '') {
  $settings: get-options-by-prefix($prefix);
  $min-width: nth($settings, 1);
  $max-width: nth($settings, 2);
  @media screen and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
    display: none !important;
  }
}




/* =========================================================== *\
  FUNCTIONS
\* =========================================================== */
@function get-options-by-prefix($prefix: '') {
  @for $i from 1 through length($grid-sizes) {
    @if $prefix == nth(nth($grid-sizes, $i), 4) {
      @return nth($grid-sizes, $i);
    }
  }
}




/* =========================================================== *\
  INCLUDE CLASSES?
\* =========================================================== */
@if $grid-html-classes == true {
  // Create row class
  .row {
    @include row();
  }

  .row > [class*="#{$grid-html-column-prefix}-"] > .row,
  .row > .row,
  .row * .row {
    @include row-reset();
  }
  

  // Setup column classes
  [class*="#{$grid-html-column-prefix}-"] {
    @include col();
  }


  @for $i from 1 through $grid-column-count {
    // Smallest column classes
    .#{$grid-html-column-prefix}-#{$i} {
      @include col($i);
    }
    
    // Smallest offset classes
    .#{$grid-html-column-prefix}-offset-#{$i} {
      @include offset($i);
    }

    @each $size in $grid-sizes {
      $prefix: nth($size, 4);

      // Column classes
      .#{$grid-html-column-prefix}-#{$prefix}-#{$i} {
        @include col($i, $prefix);
      }
      
      // Column offset classes
      .#{$grid-html-column-prefix}-#{$prefix}-offset-#{$i} {
        @include col($i, $prefix);
      }

    }

  }

  @each $size in $grid-sizes {
    $prefix: nth($size, 4);
    .hide-for-#{$prefix} {
      @include hide-for($prefix);
    }
  }
}